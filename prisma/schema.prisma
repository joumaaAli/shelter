generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) 
  password  String   // password field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

    houses    House[]  @relation("UserHouses")

}

model Praticien {
  orderNumber   String      @id
  firstName     String
  lastName      String
  RPPSNumber    String?
  cabinetNumber String
  mobileNumber  String
  email         String      @unique
  cityId        Int
  status        Status      @default(PENDING)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @default(now()) @updatedAt @map("updated_at")
  city          City        @relation(fields: [cityId], references: [id])
  materiels     Materiel[]  @relation("MaterielToPraticien")
  specialties   Specialty[] @relation("PraticienToSpecialty")
}

model City {
  id         Int         @id @default(autoincrement())
  name       String
  praticiens Praticien[]
}

model Specialty {
  id         Int         @id @default(autoincrement())
  name       String
  praticiens Praticien[] @relation("PraticienToSpecialty")
}

model Materiel {
  id         Int         @id @default(autoincrement())
  name       String
  praticiens Praticien[] @relation("MaterielToPraticien")
}

model Formation {
  id          Int      @id @default(autoincrement())
  theme       String
  startDate   DateTime
  endDate     DateTime
  location    String
  organism    String
  phoneNumber String
  email       String
  profileImg  String
}

model Article {
  id          Int      @id @default(autoincrement())
  text       String
  photo      String
}

enum Role {
  USER
  ADMIN
}

enum Status {
  ACTIVE
  INACTIVE
  PENDING
}

model Record {
  id     Int      @id @default(autoincrement())
  date   DateTime
  doctors Doctor[] @relation("RecordToDoctor")
}



model Doctor {
  id         Int      @id @default(autoincrement())
  firstName  String
  lastName   String
  phoneNumber String
  email      String
  records    Record[] @relation("RecordToDoctor")
}

model House {
  id                      Int      @id @default(autoincrement())
  userId                  String
  name                    String?
  address                 String
  phoneNumber             String
  spaceForPeople          String
  additionnalInformation  String?
  taken                   Boolean  @default(false)

  user                    User     @relation(fields: [userId], references: [id], name: "UserHouses")

  @@index([userId]) // Optional: For faster queries on userId
}